{
  "scope": "entity.name.type.class-type.gdscript|entity.name.type.variant.gdscript",
  "completions": [
    {
      "trigger": "get_type()",
      "contents": "get_type()"
    },
    {
      "trigger": "is_type(...)",
      "contents": "is_type(${1:type})"
    },
    {
      "trigger": "set(...)",
      "contents": "set(${1:property}, ${2:value})"
    },
    {
      "trigger": "get(...)",
      "contents": "get(${1:property})"
    },
    {
      "trigger": "get_property_list()",
      "contents": "get_property_list()"
    },
    {
      "trigger": "notification(...)",
      "contents": "notification(${1:what}, ${2:arg1})"
    },
    {
      "trigger": "get_instance_ID()",
      "contents": "get_instance_ID()"
    },
    {
      "trigger": "set_script(...)",
      "contents": "set_script(${1:script})"
    },
    {
      "trigger": "get_script()",
      "contents": "get_script()"
    },
    {
      "trigger": "set_meta(...)",
      "contents": "set_meta(${1:name}, ${2:value})"
    },
    {
      "trigger": "get_meta(...)",
      "contents": "get_meta(${1:name})"
    },
    {
      "trigger": "has_meta(...)",
      "contents": "has_meta(${1:name})"
    },
    {
      "trigger": "get_meta_list()",
      "contents": "get_meta_list()"
    },
    {
      "trigger": "add_user_signal(...)",
      "contents": "add_user_signal(${1:signal}, ${2:arguments})"
    },
    {
      "trigger": "emit_signal(...)",
      "contents": "emit_signal(${1:signal}, ${2:arg0}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4})"
    },
    {
      "trigger": "call(...)",
      "contents": "call(${1:method}, ${2:arg0}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4}, ${7:arg5}, ${8:arg6}, ${9:arg7}, ${10:arg8}, ${11:arg9})"
    },
    {
      "trigger": "call_deferred(...)",
      "contents": "call_deferred(${1:method}, ${2:arg0}, ${3:arg1}, ${4:arg2}, ${5:arg3}, ${6:arg4})"
    },
    {
      "trigger": "callv(...)",
      "contents": "callv(${1:method}, ${2:arg_array})"
    },
    {
      "trigger": "has_method(...)",
      "contents": "has_method(${1:arg0})"
    },
    {
      "trigger": "get_signal_list()",
      "contents": "get_signal_list()"
    },
    {
      "trigger": "connect(...)",
      "contents": "connect(${1:signal}, ${2:target}, ${3:method}, ${4:binds})"
    },
    {
      "trigger": "disconnect(...)",
      "contents": "disconnect(${1:signal}, ${2:target}, ${3:method})"
    },
    {
      "trigger": "is_connected(...)",
      "contents": "is_connected(${1:signal}, ${2:target}, ${3:method})"
    },
    {
      "trigger": "set_block_signals(...)",
      "contents": "set_block_signals(${1:enable})"
    },
    {
      "trigger": "is_blocking_signals()",
      "contents": "is_blocking_signals()"
    },
    {
      "trigger": "set_message_translation(...)",
      "contents": "set_message_translation(${1:enable})"
    },
    {
      "trigger": "can_translate_messages()",
      "contents": "can_translate_messages()"
    },
    {
      "trigger": "property_list_changed_notify()",
      "contents": "property_list_changed_notify()"
    },
    {
      "trigger": "XL_MESSAGE(...)",
      "contents": "XL_MESSAGE(${1:message})"
    },
    {
      "trigger": "tr(...)",
      "contents": "tr(${1:message})"
    },
    "NOTIFICATION_POSTINITIALIZE",
    "NOTIFICATION_PREDELETE",
    "CONNECT_DEFERRED",
    "CONNECT_PERSIST",
    "CONNECT_ONESHOT"
  ]
}